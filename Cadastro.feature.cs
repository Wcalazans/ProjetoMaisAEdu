// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GrupoAEducation.Tests
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CadastroNoSistemaGrupoAEducacaoFeature : object, Xunit.IClassFixture<CadastroNoSistemaGrupoAEducacaoFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "Cadastro no sistema Grupo A Educação", "  Como um usuário potencial\r\n  Quero me cadastrar no sistema\r\n  Para acessar os s" +
                "erviços oferecidos", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Cadastro.feature"
#line hidden
        
        public CadastroNoSistemaGrupoAEducacaoFeature(CadastroNoSistemaGrupoAEducacaoFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 6
  #line hidden
#line 7
    await testRunner.GivenAsync("Que estou na página de cadastro", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Selecionar nível de educação e curso")]
        [Xunit.TraitAttribute("FeatureTitle", "Cadastro no sistema Grupo A Educação")]
        [Xunit.TraitAttribute("Description", "Selecionar nível de educação e curso")]
        public async System.Threading.Tasks.Task SelecionarNivelDeEducacaoECurso()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Selecionar nível de educação e curso", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
  await this.FeatureBackgroundAsync();
#line hidden
#line 10
    await testRunner.WhenAsync("Seleciono o nível de educação \"undergraduate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 11
    await testRunner.AndAsync("Seleciono o curso \"Mestrado em Ciência da Computação\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
    await testRunner.ThenAsync("Devo ser direcionado para a tela de preenchimento de formulário", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Preencher e enviar o formulário de cadastro com sucesso")]
        [Xunit.TraitAttribute("FeatureTitle", "Cadastro no sistema Grupo A Educação")]
        [Xunit.TraitAttribute("Description", "Preencher e enviar o formulário de cadastro com sucesso")]
        public async System.Threading.Tasks.Task PreencherEEnviarOFormularioDeCadastroComSucesso()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Preencher e enviar o formulário de cadastro com sucesso", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
  await this.FeatureBackgroundAsync();
#line hidden
#line 15
    await testRunner.WhenAsync("Seleciono o nível de educação \"undergraduate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 16
    await testRunner.AndAsync("Seleciono o curso \"Mestrado em Ciência da Computação\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "CPF",
                            "Nome",
                            "Sobrenome",
                            "NomeSocial",
                            "Nascimento",
                            "Deficiencia",
                            "Email",
                            "Celular",
                            "Telefone",
                            "CEP",
                            "Endereco",
                            "Complemento",
                            "Bairro",
                            "Cidade",
                            "Estado",
                            "País"});
                table1.AddRow(new string[] {
                            "13449831704",
                            "Ramon",
                            "Silva",
                            "Wesley Calazans",
                            "28/03/1990",
                            "false",
                            "joao@email.com",
                            "21999998888",
                            "2122223333",
                            "12345678",
                            "Rua Exemplo",
                            "Apto 101",
                            "Centro",
                            "Rio",
                            "RJ",
                            "Brasil"});
#line 17
    await testRunner.AndAsync("Preencho o formulário com os seguintes dados:", ((string)(null)), table1, "And ");
#line hidden
#line 20
    await testRunner.ThenAsync("Devo ver a mensagem \"Sua jornada começa aqui!\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Realizar login após o cadastro")]
        [Xunit.TraitAttribute("FeatureTitle", "Cadastro no sistema Grupo A Educação")]
        [Xunit.TraitAttribute("Description", "Realizar login após o cadastro")]
        public async System.Threading.Tasks.Task RealizarLoginAposOCadastro()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Realizar login após o cadastro", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
  await this.FeatureBackgroundAsync();
#line hidden
#line 23
    await testRunner.WhenAsync("Seleciono o nível de educação \"undergraduate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 24
    await testRunner.AndAsync("Seleciono o curso \"Mestrado em Ciência da Computação\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "CPF",
                            "Nome",
                            "Sobrenome",
                            "NomeSocial",
                            "Nascimento",
                            "Deficiencia",
                            "Email",
                            "Celular",
                            "Telefone",
                            "CEP",
                            "Endereco",
                            "Complemento",
                            "Bairro",
                            "Cidade",
                            "Estado",
                            "País"});
                table2.AddRow(new string[] {
                            "13449831704",
                            "Ramon",
                            "Silva",
                            "Wesley Calazans",
                            "28/03/1990",
                            "false",
                            "joao@email.com",
                            "21999998888",
                            "2122223333",
                            "12345678",
                            "Rua Exemplo",
                            "Apto 101",
                            "Centro",
                            "Rio",
                            "RJ",
                            "Brasil"});
#line 25
    await testRunner.AndAsync("Preencho o formulário com os seguintes dados:", ((string)(null)), table2, "And ");
#line hidden
#line 28
    await testRunner.AndAsync("Faço login com o usuário \"candidato\" e senha \"subscription\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
    await testRunner.ThenAsync("Devo ser redirecionado para a área do candidato", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await CadastroNoSistemaGrupoAEducacaoFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await CadastroNoSistemaGrupoAEducacaoFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
